OpenShadingLanguage 1.00
# Compiled by oslc 1.10.10
# options: -q -O2 -IC:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders -IC:/b/buildbot-worker-windows/windows_291/blender.git/../lib/win64_vc15/osl/shaders -o C:/b/buildbot-worker-windows/windows_291/build/intern/cycles/kernel/shaders/node_math.oso
shader node_math
param	string	type	"add"		%read{0,212} %write{2147483647,-1}
param	float	Value1	0.5		%read{2,214} %write{2147483647,-1}
param	float	Value2	0.5		%read{2,215} %write{2147483647,-1}
param	float	Value3	0.5		%read{111,227} %write{2147483647,-1}
oparam	float	Value	0		%read{2147483647,-1} %write{2,234}
local	float	___330_h	%read{203,226} %write{201,223}
local	float	___337_range	%read{112,117} %write{111,111}
const	string	$const1	"add"		%read{0,0} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const2	"subtract"		%read{3,3} %write{2147483647,-1}
temp	int	$tmp2	%read{4,4} %write{3,3}
const	string	$const3	"multiply"		%read{6,6} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
const	string	$const4	"divide"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp4	%read{10,10} %write{9,9}
const	string	$const5	"safe_divide"		%read{11,100} %write{2147483647,-1}
const	float	$const6	0		%read{12,222} %write{2147483647,-1}
temp	int	$tmp5	%read{13,13} %write{12,12}
const	string	$const7	"power"		%read{17,17} %write{2147483647,-1}
temp	int	$tmp6	%read{18,18} %write{17,17}
const	string	$const8	"logarithm"		%read{20,20} %write{2147483647,-1}
temp	int	$tmp7	%read{21,21} %write{20,20}
const	string	$const9	"safe_log"		%read{22,22} %write{2147483647,-1}
temp	int	$tmp8	%read{24,24} %write{23,23}
temp	int	$tmp9	%read{25,29} %write{24,28}
const	int	$const10	0		%read{24,183} %write{2147483647,-1}
temp	int	$tmp10	%read{27,27} %write{26,26}
temp	int	$tmp11	%read{28,28} %write{27,27}
temp	float	$tmp12	%read{32,32} %write{30,30}
temp	float	$tmp13	%read{32,32} %write{31,31}
const	string	$const11	"sqrt"		%read{35,35} %write{2147483647,-1}
temp	int	$tmp14	%read{36,36} %write{35,35}
const	string	$const12	"safe_sqrt"		%read{37,37} %write{2147483647,-1}
temp	int	$tmp15	%read{39,39} %write{38,38}
const	string	$const13	"inversesqrt"		%read{43,43} %write{2147483647,-1}
temp	int	$tmp16	%read{44,44} %write{43,43}
const	string	$const14	"absolute"		%read{46,46} %write{2147483647,-1}
temp	int	$tmp17	%read{47,47} %write{46,46}
const	string	$const15	"radians"		%read{49,51} %write{2147483647,-1}
temp	int	$tmp18	%read{50,50} %write{49,49}
const	float	$const16	3.14159274		%read{52,57} %write{2147483647,-1}
const	float	$const17	180		%read{52,57} %write{2147483647,-1}
temp	float	$tmp19	%read{53,53} %write{52,52}
const	string	$const18	"degrees"		%read{54,56} %write{2147483647,-1}
temp	int	$tmp20	%read{55,55} %write{54,54}
temp	float	$tmp21	%read{58,58} %write{57,57}
const	string	$const19	"minimum"		%read{59,59} %write{2147483647,-1}
temp	int	$tmp22	%read{60,60} %write{59,59}
const	string	$const20	"maximum"		%read{62,62} %write{2147483647,-1}
temp	int	$tmp23	%read{63,63} %write{62,62}
const	string	$const21	"less_than"		%read{65,65} %write{2147483647,-1}
temp	int	$tmp24	%read{66,66} %write{65,65}
temp	int	$tmp25	%read{68,68} %write{67,67}
const	string	$const22	"greater_than"		%read{69,69} %write{2147483647,-1}
temp	int	$tmp26	%read{70,70} %write{69,69}
temp	int	$tmp27	%read{72,72} %write{71,71}
const	string	$const23	"round"		%read{73,73} %write{2147483647,-1}
temp	int	$tmp28	%read{74,74} %write{73,73}
const	float	$const24	0.5		%read{75,75} %write{2147483647,-1}
temp	float	$tmp29	%read{76,76} %write{75,75}
const	string	$const25	"floor"		%read{77,77} %write{2147483647,-1}
temp	int	$tmp30	%read{78,78} %write{77,77}
const	string	$const26	"ceil"		%read{80,80} %write{2147483647,-1}
temp	int	$tmp31	%read{81,81} %write{80,80}
const	string	$const27	"fraction"		%read{83,83} %write{2147483647,-1}
temp	int	$tmp32	%read{84,84} %write{83,83}
temp	float	$tmp33	%read{86,86} %write{85,85}
const	string	$const28	"modulo"		%read{87,87} %write{2147483647,-1}
temp	int	$tmp34	%read{88,88} %write{87,87}
const	string	$const29	"safe_modulo"		%read{89,89} %write{2147483647,-1}
temp	int	$tmp35	%read{91,91} %write{90,90}
const	string	$const30	"trunc"		%read{95,95} %write{2147483647,-1}
temp	int	$tmp36	%read{96,96} %write{95,95}
const	string	$const31	"snap"		%read{98,98} %write{2147483647,-1}
temp	int	$tmp37	%read{99,99} %write{98,98}
temp	float	$tmp38	%read{107,107} %write{106,106}
temp	float	$tmp39	%read{106,106} %write{103,104}
temp	int	$tmp40	%read{102,102} %write{101,101}
const	string	$const32	"wrap"		%read{108,110} %write{2147483647,-1}
temp	int	$tmp41	%read{109,109} %write{108,108}
temp	int	$tmp42	%read{113,113} %write{112,112}
temp	float	$tmp43	%read{117,117} %write{116,116}
temp	float	$tmp44	%read{115,115} %write{114,114}
temp	float	$tmp45	%read{116,116} %write{115,115}
temp	float	$tmp46	%read{118,118} %write{117,117}
const	string	$const33	"pingpong"		%read{121,123} %write{2147483647,-1}
temp	int	$tmp47	%read{122,122} %write{121,121}
temp	int	$tmp48	%read{125,125} %write{124,124}
temp	float	$tmp49	%read{132,132} %write{131,131}
temp	float	$tmp50	%read{128,128} %write{126,126}
const	float	$const34	2		%read{127,133} %write{2147483647,-1}
temp	float	$tmp51	%read{128,128} %write{127,127}
temp	float	$tmp52	%read{130,131} %write{128,128}
const	string	$const35	"fract"		%read{129,129} %write{2147483647,-1}
temp	float	$tmp53	%read{131,131} %write{130,130}
temp	float	$tmp54	%read{133,133} %write{132,132}
temp	float	$tmp55	%read{134,134} %write{133,133}
temp	float	$tmp56	%read{135,135} %write{134,134}
const	string	$const36	"sine"		%read{138,138} %write{2147483647,-1}
temp	int	$tmp57	%read{139,139} %write{138,138}
const	string	$const37	"cosine"		%read{141,141} %write{2147483647,-1}
temp	int	$tmp58	%read{142,142} %write{141,141}
const	string	$const38	"tangent"		%read{144,144} %write{2147483647,-1}
temp	int	$tmp59	%read{145,145} %write{144,144}
const	string	$const39	"sinh"		%read{147,147} %write{2147483647,-1}
temp	int	$tmp60	%read{148,148} %write{147,147}
const	string	$const40	"cosh"		%read{150,150} %write{2147483647,-1}
temp	int	$tmp61	%read{151,151} %write{150,150}
const	string	$const41	"tanh"		%read{153,153} %write{2147483647,-1}
temp	int	$tmp62	%read{154,154} %write{153,153}
const	string	$const42	"arcsine"		%read{156,156} %write{2147483647,-1}
temp	int	$tmp63	%read{157,157} %write{156,156}
const	string	$const43	"arccosine"		%read{159,159} %write{2147483647,-1}
temp	int	$tmp64	%read{160,160} %write{159,159}
const	string	$const44	"arctangent"		%read{162,162} %write{2147483647,-1}
temp	int	$tmp65	%read{163,163} %write{162,162}
const	string	$const45	"arctan2"		%read{165,165} %write{2147483647,-1}
temp	int	$tmp66	%read{166,166} %write{165,165}
const	string	$const46	"sign"		%read{168,168} %write{2147483647,-1}
temp	int	$tmp67	%read{169,169} %write{168,168}
const	string	$const47	"exponent"		%read{171,171} %write{2147483647,-1}
temp	int	$tmp68	%read{172,172} %write{171,171}
const	string	$const48	"compare"		%read{174,174} %write{2147483647,-1}
temp	int	$tmp69	%read{175,175} %write{174,174}
temp	int	$tmp70	%read{177,177} %write{176,176}
temp	int	$tmp71	%read{178,185} %write{177,184}
temp	float	$tmp72	%read{182,182} %write{180,180}
temp	float	$tmp73	%read{180,180} %write{179,179}
temp	float	$tmp74	%read{182,182} %write{181,181}
const	float	$const49	9.99999975e-06		%read{181,181} %write{2147483647,-1}
temp	int	$tmp75	%read{183,183} %write{182,182}
temp	int	$tmp76	%read{184,184} %write{183,183}
const	float	$const50	1		%read{186,228} %write{2147483647,-1}
const	string	$const51	"multiply_add"		%read{188,188} %write{2147483647,-1}
temp	int	$tmp77	%read{189,189} %write{188,188}
temp	float	$tmp78	%read{191,191} %write{190,190}
const	string	$const52	"smoothmin"		%read{192,216} %write{2147483647,-1}
temp	int	$tmp79	%read{193,193} %write{192,192}
temp	int	$tmp80	%read{196,196} %write{195,195}
temp	float	$tmp81	%read{201,201} %write{200,200}
temp	float	$tmp82	%read{199,199} %write{198,198}
temp	float	$tmp83	%read{198,198} %write{197,197}
temp	float	$tmp84	%read{200,200} %write{199,199}
temp	float	$tmp85	%read{208,208} %write{202,202}
temp	float	$tmp86	%read{204,204} %write{203,203}
temp	float	$tmp87	%read{205,205} %write{204,204}
temp	float	$tmp88	%read{207,207} %write{205,205}
const	float	$const53	6		%read{206,228} %write{2147483647,-1}
temp	float	$tmp89	%read{207,207} %write{206,206}
temp	float	$tmp90	%read{208,208} %write{207,207}
const	string	$const54	"smoothmax"		%read{212,212} %write{2147483647,-1}
temp	int	$tmp91	%read{213,213} %write{212,212}
temp	float	$tmp92	%read{234,234} %write{230,232}
temp	float	$tmp93	%read{219,232} %write{214,214}
temp	float	$tmp94	%read{219,232} %write{215,215}
temp	int	$tmp95	%read{218,218} %write{217,217}
temp	float	$tmp96	%read{223,223} %write{222,222}
temp	float	$tmp97	%read{221,221} %write{220,220}
temp	float	$tmp98	%read{220,220} %write{219,219}
temp	float	$tmp99	%read{222,222} %write{221,221}
temp	float	$tmp100	%read{230,230} %write{224,224}
temp	float	$tmp101	%read{226,226} %write{225,225}
temp	float	$tmp102	%read{227,227} %write{226,226}
temp	float	$tmp103	%read{229,229} %write{227,227}
temp	float	$tmp104	%read{229,229} %write{228,228}
temp	float	$tmp105	%read{230,230} %write{229,229}
const	string	$const55	"%s"		%read{235,235} %write{2147483647,-1}
const	string	$const56	"Unknown math operator!"		%read{235,235} %write{2147483647,-1}
code ___main___
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:27
#   if (type == "add")
	eq		$tmp1 type $const1 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{27} %argrw{"wrr"}
	if		$tmp1 3 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:28
#     Value = Value1 + Value2;
	add		Value Value1 Value2 	%line{28} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:29
#   else if (type == "subtract")
	eq		$tmp2 type $const2 	%line{29} %argrw{"wrr"}
	if		$tmp2 6 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:30
#     Value = Value1 - Value2;
	sub		Value Value1 Value2 	%line{30} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:31
#   else if (type == "multiply")
	eq		$tmp3 type $const3 	%line{31} %argrw{"wrr"}
	if		$tmp3 9 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:32
#     Value = Value1 * Value2;
	mul		Value Value1 Value2 	%line{32} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:33
#   else if (type == "divide")
	eq		$tmp4 type $const4 	%line{33} %argrw{"wrr"}
	if		$tmp4 17 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:34
#     Value = safe_divide(Value1, Value2);
	functioncall	$const5 17 	%line{34} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:19
#   return (b != 0.0) ? a / b : 0.0;
	neq		$tmp5 Value2 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{19} %argrw{"wrr"}
	if		$tmp5 15 16 	%argrw{"r"}
	div		Value Value1 Value2 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:35
#   else if (type == "power")
	eq		$tmp6 type $const7 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{35} %argrw{"wrr"}
	if		$tmp6 20 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:36
#     Value = pow(Value1, Value2);
	pow		Value Value1 Value2 	%line{36} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:37
#   else if (type == "logarithm")
	eq		$tmp7 type $const8 	%line{37} %argrw{"wrr"}
	if		$tmp7 35 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:38
#     Value = safe_log(Value1, Value2);
	functioncall	$const9 35 	%line{38} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:63
#   return (a > 0.0 && b > 0.0) ? log(a) / log(b) : 0.0;
	gt		$tmp8 Value1 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{63} %argrw{"wrr"}
	neq		$tmp9 $tmp8 $const10 	%argrw{"wrr"}
	if		$tmp9 29 29 	%argrw{"r"}
	gt		$tmp10 Value2 $const6 	%argrw{"wrr"}
	neq		$tmp11 $tmp10 $const10 	%argrw{"wrr"}
	assign		$tmp9 $tmp11 	%argrw{"wr"}
	if		$tmp9 33 34 	%argrw{"r"}
	log		$tmp12 Value1 	%argrw{"wr"}
	log		$tmp13 Value2 	%argrw{"wr"}
	div		Value $tmp12 $tmp13 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:39
#   else if (type == "sqrt")
	eq		$tmp14 type $const11 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{39} %argrw{"wrr"}
	if		$tmp14 43 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:40
#     Value = safe_sqrt(Value1);
	functioncall	$const12 43 	%line{40} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:58
#   return (a > 0.0) ? sqrt(a) : 0.0;
	gt		$tmp15 Value1 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{58} %argrw{"wrr"}
	if		$tmp15 41 42 	%argrw{"r"}
	sqrt		Value Value1 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:41
#   else if (type == "inversesqrt")
	eq		$tmp16 type $const13 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{41} %argrw{"wrr"}
	if		$tmp16 46 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:42
#     Value = inversesqrt(Value1);
	inversesqrt	Value Value1 	%line{42} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:43
#   else if (type == "absolute")
	eq		$tmp17 type $const14 	%line{43} %argrw{"wrr"}
	if		$tmp17 49 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:44
#     Value = fabs(Value1);
	fabs		Value Value1 	%line{44} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:45
#   else if (type == "radians")
	eq		$tmp18 type $const15 	%line{45} %argrw{"wrr"}
	if		$tmp18 54 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:46
#     Value = radians(Value1);
	functioncall	$const15 54 	%line{46} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\lib\win64_vc15\osl\shaders\stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp19 $const16 $const17 	%filename{"C:\b\buildbot-worker-windows\windows_291\lib\win64_vc15\osl\shaders\stdosl.h"} %line{88} %argrw{"wrr"}
	mul		Value Value1 $tmp19 	%argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:47
#   else if (type == "degrees")
	eq		$tmp20 type $const18 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{47} %argrw{"wrr"}
	if		$tmp20 59 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:48
#     Value = degrees(Value1);
	functioncall	$const18 59 	%line{48} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\lib\win64_vc15\osl\shaders\stdosl.h:83
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp21 $const17 $const16 	%filename{"C:\b\buildbot-worker-windows\windows_291\lib\win64_vc15\osl\shaders\stdosl.h"} %line{83} %argrw{"wrr"}
	mul		Value Value1 $tmp21 	%argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:49
#   else if (type == "minimum")
	eq		$tmp22 type $const19 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{49} %argrw{"wrr"}
	if		$tmp22 62 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:50
#     Value = min(Value1, Value2);
	min		Value Value1 Value2 	%line{50} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:51
#   else if (type == "maximum")
	eq		$tmp23 type $const20 	%line{51} %argrw{"wrr"}
	if		$tmp23 65 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:52
#     Value = max(Value1, Value2);
	max		Value Value1 Value2 	%line{52} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:53
#   else if (type == "less_than")
	eq		$tmp24 type $const21 	%line{53} %argrw{"wrr"}
	if		$tmp24 69 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:54
#     Value = Value1 < Value2;
	lt		$tmp25 Value1 Value2 	%line{54} %argrw{"wrr"}
	assign		Value $tmp25 	%argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:55
#   else if (type == "greater_than")
	eq		$tmp26 type $const22 	%line{55} %argrw{"wrr"}
	if		$tmp26 73 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:56
#     Value = Value1 > Value2;
	gt		$tmp27 Value1 Value2 	%line{56} %argrw{"wrr"}
	assign		Value $tmp27 	%argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:57
#   else if (type == "round")
	eq		$tmp28 type $const23 	%line{57} %argrw{"wrr"}
	if		$tmp28 77 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:58
#     Value = floor(Value1 + 0.5);
	add		$tmp29 Value1 $const24 	%line{58} %argrw{"wrr"}
	floor		Value $tmp29 	%argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:59
#   else if (type == "floor")
	eq		$tmp30 type $const25 	%line{59} %argrw{"wrr"}
	if		$tmp30 80 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:60
#     Value = floor(Value1);
	floor		Value Value1 	%line{60} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:61
#   else if (type == "ceil")
	eq		$tmp31 type $const26 	%line{61} %argrw{"wrr"}
	if		$tmp31 83 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:62
#     Value = ceil(Value1);
	ceil		Value Value1 	%line{62} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:63
#   else if (type == "fraction")
	eq		$tmp32 type $const27 	%line{63} %argrw{"wrr"}
	if		$tmp32 87 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:64
#     Value = Value1 - floor(Value1);
	floor		$tmp33 Value1 	%line{64} %argrw{"wr"}
	sub		Value Value1 $tmp33 	%argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:65
#   else if (type == "modulo")
	eq		$tmp34 type $const28 	%line{65} %argrw{"wrr"}
	if		$tmp34 95 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:66
#     Value = safe_modulo(Value1, Value2);
	functioncall	$const29 95 	%line{66} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:31
#   return (b != 0.0) ? fmod(a, b) : 0.0;
	neq		$tmp35 Value2 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{31} %argrw{"wrr"}
	if		$tmp35 93 94 	%argrw{"r"}
	fmod		Value Value1 Value2 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:67
#   else if (type == "trunc")
	eq		$tmp36 type $const30 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{67} %argrw{"wrr"}
	if		$tmp36 98 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:68
#     Value = trunc(Value1);
	trunc		Value Value1 	%line{68} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:69
#   else if (type == "snap")
	eq		$tmp37 type $const31 	%line{69} %argrw{"wrr"}
	if		$tmp37 108 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:70
#     Value = floor(safe_divide(Value1, Value2)) * Value2;
	functioncall	$const5 106 	%line{70} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:19
#   return (b != 0.0) ? a / b : 0.0;
	neq		$tmp40 Value2 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{19} %argrw{"wrr"}
	if		$tmp40 104 105 	%argrw{"r"}
	div		$tmp39 Value1 Value2 	%argrw{"wrr"}
	assign		$tmp39 $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:70
#     Value = floor(safe_divide(Value1, Value2)) * Value2;
	floor		$tmp38 $tmp39 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{70} %argrw{"wr"}
	mul		Value $tmp38 Value2 	%argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:71
#   else if (type == "wrap")
	eq		$tmp41 type $const32 	%line{71} %argrw{"wrr"}
	if		$tmp41 121 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:72
#     Value = wrap(Value1, Value2, Value3);
	functioncall	$const32 121 	%line{72} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:80
#   float range = max - min;
	sub		___337_range Value2 Value3 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{80} %argrw{"wrr"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:81
#   return (range != 0.0) ? value - (range * floor((value - min) / range)) : min;
	neq		$tmp42 ___337_range $const6 	%line{81} %argrw{"wrr"}
	if		$tmp42 119 120 	%argrw{"r"}
	sub		$tmp44 Value1 Value3 	%argrw{"wrr"}
	div		$tmp45 $tmp44 ___337_range 	%argrw{"wrr"}
	floor		$tmp43 $tmp45 	%argrw{"wr"}
	mul		$tmp46 ___337_range $tmp43 	%argrw{"wrr"}
	sub		Value Value1 $tmp46 	%argrw{"wrr"}
	assign		Value Value3 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:73
#   else if (type == "pingpong")
	eq		$tmp47 type $const33 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{73} %argrw{"wrr"}
	if		$tmp47 138 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:74
#     Value = pingpong(Value1, Value2);
	functioncall	$const33 138 	%line{74} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:53
#   return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
	neq		$tmp48 Value2 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{53} %argrw{"wrr"}
	if		$tmp48 136 137 	%argrw{"r"}
	sub		$tmp50 Value1 Value2 	%argrw{"wrr"}
	mul		$tmp51 Value2 $const34 	%argrw{"wrr"}
	div		$tmp52 $tmp50 $tmp51 	%argrw{"wrr"}
	functioncall	$const35 132 	%argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:36
#   return a - floor(a);
	floor		$tmp53 $tmp52 	%line{36} %argrw{"wr"}
	sub		$tmp49 $tmp52 $tmp53 	%argrw{"wrr"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:53
#   return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
	mul		$tmp54 $tmp49 Value2 	%line{53} %argrw{"wrr"}
	mul		$tmp55 $tmp54 $const34 	%argrw{"wrr"}
	sub		$tmp56 $tmp55 Value2 	%argrw{"wrr"}
	abs		Value $tmp56 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:75
#   else if (type == "sine")
	eq		$tmp57 type $const36 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{75} %argrw{"wrr"}
	if		$tmp57 141 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:76
#     Value = sin(Value1);
	sin		Value Value1 	%line{76} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:77
#   else if (type == "cosine")
	eq		$tmp58 type $const37 	%line{77} %argrw{"wrr"}
	if		$tmp58 144 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:78
#     Value = cos(Value1);
	cos		Value Value1 	%line{78} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:79
#   else if (type == "tangent")
	eq		$tmp59 type $const38 	%line{79} %argrw{"wrr"}
	if		$tmp59 147 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:80
#     Value = tan(Value1);
	tan		Value Value1 	%line{80} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:81
#   else if (type == "sinh")
	eq		$tmp60 type $const39 	%line{81} %argrw{"wrr"}
	if		$tmp60 150 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:82
#     Value = sinh(Value1);
	sinh		Value Value1 	%line{82} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:83
#   else if (type == "cosh")
	eq		$tmp61 type $const40 	%line{83} %argrw{"wrr"}
	if		$tmp61 153 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:84
#     Value = cosh(Value1);
	cosh		Value Value1 	%line{84} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:85
#   else if (type == "tanh")
	eq		$tmp62 type $const41 	%line{85} %argrw{"wrr"}
	if		$tmp62 156 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:86
#     Value = tanh(Value1);
	tanh		Value Value1 	%line{86} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:87
#   else if (type == "arcsine")
	eq		$tmp63 type $const42 	%line{87} %argrw{"wrr"}
	if		$tmp63 159 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:88
#     Value = asin(Value1);
	asin		Value Value1 	%line{88} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:89
#   else if (type == "arccosine")
	eq		$tmp64 type $const43 	%line{89} %argrw{"wrr"}
	if		$tmp64 162 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:90
#     Value = acos(Value1);
	acos		Value Value1 	%line{90} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:91
#   else if (type == "arctangent")
	eq		$tmp65 type $const44 	%line{91} %argrw{"wrr"}
	if		$tmp65 165 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:92
#     Value = atan(Value1);
	atan		Value Value1 	%line{92} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:93
#   else if (type == "arctan2")
	eq		$tmp66 type $const45 	%line{93} %argrw{"wrr"}
	if		$tmp66 168 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:94
#     Value = atan2(Value1, Value2);
	atan2		Value Value1 Value2 	%line{94} %argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:95
#   else if (type == "sign")
	eq		$tmp67 type $const46 	%line{95} %argrw{"wrr"}
	if		$tmp67 171 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:96
#     Value = sign(Value1);
	sign		Value Value1 	%line{96} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:97
#   else if (type == "exponent")
	eq		$tmp68 type $const47 	%line{97} %argrw{"wrr"}
	if		$tmp68 174 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:98
#     Value = exp(Value1);
	exp		Value Value1 	%line{98} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:99
#   else if (type == "compare")
	eq		$tmp69 type $const48 	%line{99} %argrw{"wrr"}
	if		$tmp69 188 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:100
#     Value = ((Value1 == Value2) || (abs(Value1 - Value2) <= max(Value3, 1e-5))) ? 1.0 : 0.0;
	eq		$tmp70 Value1 Value2 	%line{100} %argrw{"wrr"}
	neq		$tmp71 $tmp70 $const10 	%argrw{"wrr"}
	if		$tmp71 179 185 	%argrw{"r"}
	sub		$tmp73 Value1 Value2 	%argrw{"wrr"}
	abs		$tmp72 $tmp73 	%argrw{"wr"}
	max		$tmp74 Value3 $const49 	%argrw{"wrr"}
	le		$tmp75 $tmp72 $tmp74 	%argrw{"wrr"}
	neq		$tmp76 $tmp75 $const10 	%argrw{"wrr"}
	assign		$tmp71 $tmp76 	%argrw{"wr"}
	if		$tmp71 187 188 	%argrw{"r"}
	assign		Value $const50 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:101
#   else if (type == "multiply_add")
	eq		$tmp77 type $const51 	%line{101} %argrw{"wrr"}
	if		$tmp77 192 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:102
#     Value = Value1 * Value2 + Value3;
	mul		$tmp78 Value1 Value2 	%line{102} %argrw{"wrr"}
	add		Value $tmp78 Value3 	%argrw{"wrr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:103
#   else if (type == "smoothmin")
	eq		$tmp79 type $const52 	%line{103} %argrw{"wrr"}
	if		$tmp79 212 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:104
#     Value = smoothmin(Value1, Value2, Value3);
	functioncall	$const52 212 	%line{104} %argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:42
#   if (c != 0.0) {
	neq		$tmp80 Value3 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{42} %argrw{"wrr"}
	if		$tmp80 210 212 	%argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:43
#     float h = max(c - abs(a - b), 0.0) / c;
	sub		$tmp83 Value1 Value2 	%line{43} %argrw{"wrr"}
	abs		$tmp82 $tmp83 	%argrw{"wr"}
	sub		$tmp84 Value3 $tmp82 	%argrw{"wrr"}
	max		$tmp81 $tmp84 $const6 	%argrw{"wrr"}
	div		___330_h $tmp81 Value3 	%argrw{"wrr"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:44
#     return min(a, b) - h * h * h * c * (1.0 / 6.0);
	min		$tmp85 Value1 Value2 	%line{44} %argrw{"wrr"}
	mul		$tmp86 ___330_h ___330_h 	%argrw{"wrr"}
	mul		$tmp87 $tmp86 ___330_h 	%argrw{"wrr"}
	mul		$tmp88 $tmp87 Value3 	%argrw{"wrr"}
	div		$tmp89 $const50 $const53 	%argrw{"wrr"}
	mul		$tmp90 $tmp88 $tmp89 	%argrw{"wrr"}
	sub		Value $tmp85 $tmp90 	%argrw{"wrr"}
	return
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:47
#     return min(a, b);
	min		Value Value1 Value2 	%line{47} %argrw{"wrr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:105
#   else if (type == "smoothmax")
	eq		$tmp91 type $const54 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{105} %argrw{"wrr"}
	if		$tmp91 235 236 	%argrw{"r"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:106
#     Value = -(smoothmin(-Value1, -Value2, Value3));
	neg		$tmp93 Value1 	%line{106} %argrw{"wr"}
	neg		$tmp94 Value2 	%argrw{"wr"}
	functioncall	$const52 234 	%argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:42
#   if (c != 0.0) {
	neq		$tmp95 Value3 $const6 	%filename{"C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h"} %line{42} %argrw{"wrr"}
	if		$tmp95 232 234 	%argrw{"r"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:43
#     float h = max(c - abs(a - b), 0.0) / c;
	sub		$tmp98 $tmp93 $tmp94 	%line{43} %argrw{"wrr"}
	abs		$tmp97 $tmp98 	%argrw{"wr"}
	sub		$tmp99 Value3 $tmp97 	%argrw{"wrr"}
	max		$tmp96 $tmp99 $const6 	%argrw{"wrr"}
	div		___330_h $tmp96 Value3 	%argrw{"wrr"}
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:44
#     return min(a, b) - h * h * h * c * (1.0 / 6.0);
	min		$tmp100 $tmp93 $tmp94 	%line{44} %argrw{"wrr"}
	mul		$tmp101 ___330_h ___330_h 	%argrw{"wrr"}
	mul		$tmp102 $tmp101 ___330_h 	%argrw{"wrr"}
	mul		$tmp103 $tmp102 Value3 	%argrw{"wrr"}
	div		$tmp104 $const50 $const53 	%argrw{"wrr"}
	mul		$tmp105 $tmp103 $tmp104 	%argrw{"wrr"}
	sub		$tmp92 $tmp100 $tmp105 	%argrw{"wrr"}
	return
# C:\b\buildbot-worker-windows\windows_291\blender.git\intern\cycles\kernel\shaders\node_math.h:47
#     return min(a, b);
	min		$tmp92 $tmp93 $tmp94 	%line{47} %argrw{"wrr"}
	return
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:106
#     Value = -(smoothmin(-Value1, -Value2, Value3));
	neg		Value $tmp92 	%filename{"C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl"} %line{106} %argrw{"wr"}
# C:/b/buildbot-worker-windows/windows_291/blender.git/intern/cycles/kernel/shaders/node_math.osl:108
#     warning("%s", "Unknown math operator!");
	warning		$const55 $const56 	%line{108} %argrw{"rr"}
	end
